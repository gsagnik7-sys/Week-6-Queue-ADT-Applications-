Python ->
class QueueWithTwoStacks:
    def __init__(self):
        self.s1 = []  
        self.s2 = []  
    def enqueue(self, x):
        self.s1.append(x)
    def dequeue(self):
        if not self.s2:
            while self.s1:
                self.s2.append(self.s1.pop())
        if self.s2:
            self.s2.pop()
    def peek(self):
        if not self.s2:
            while self.s1:
                self.s2.append(self.s1.pop())
        if self.s2:
            print(self.s2[-1])
if __name__ == "__main__":
    q = int(input())
    queue = QueueWithTwoStacks() 
    for _ in range(q):
        query = input().split()
        if query[0] == "1":
            queue.enqueue(int(query[1]))
        elif query[0] == "2":
            queue.dequeue()
        elif query[0] == "3":
            queue.peek()



c-->
typedef struct {
    int arr[MAX];
    int top;
} Stack;
void push(Stack* s, int x) {
    s->arr[++s->top] = x;
}
int pop(Stack* s) {
    if (s->top == -1) return -1;
    return s->arr[s->top--];
}
int peek(Stack* s) {
    if (s->top == -1) return -1;
    return s->arr[s->top];
}
typedef struct {
    Stack s1, s2;
} Queue;
void initQueue(Queue* q) {
    q->s1.top = -1;
    q->s2.top = -1;
}
void enqueue(Queue* q, int x) {
    push(&q->s1, x);
}
void dequeue(Queue* q) {
    if (q->s2.top == -1) {
        while (q->s1.top != -1) {
            push(&q->s2, pop(&q->s1));
        }
    }
    if (q->s2.top != -1) pop(&q->s2);
}
